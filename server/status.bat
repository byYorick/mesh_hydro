@echo off
REM ========================================
REM MESH HYDRO V2 - DOCKER STATUS SCRIPT (Windows)
REM ========================================

setlocal enabledelayedexpansion

echo üìä –°—Ç–∞—Ç—É—Å Mesh Hydro System V2...

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
docker --version >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
    pause
    exit /b 1
)

docker-compose --version >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
    pause
    exit /b 1
)

echo [INFO] Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
echo [INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose.yml...

if not exist "docker-compose.yml" (
    echo [ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!
    pause
    exit /b 1
)

REM –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo [INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...
echo.
echo üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:
echo =====================
docker-compose ps

echo.
echo üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
echo ========================

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
set services=postgres mosquitto backend mqtt_listener scheduler reverb frontend
for %%s in (%services%) do (
    docker-compose ps -q %%s >nul 2>&1
    if not errorlevel 1 (
        echo [SUCCESS] ‚úÖ %%s: –ó–∞–ø—É—â–µ–Ω
    ) else (
        echo [ERROR] ‚ùå %%s: –ù–µ –Ω–∞–π–¥–µ–Ω
    )
)

echo.
echo üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:
echo =================================

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
docker-compose exec -T postgres pg_isready -U hydro -d hydro_system >nul 2>&1
if not errorlevel 1 (
    echo [SUCCESS] ‚úÖ PostgreSQL: –î–æ—Å—Ç—É–ø–µ–Ω
) else (
    echo [ERROR] ‚ùå PostgreSQL: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
curl -s http://localhost:8000/health >nul 2>&1
if not errorlevel 1 (
    echo [SUCCESS] ‚úÖ Backend API: –î–æ—Å—Ç—É–ø–µ–Ω
) else (
    echo [WARNING] ‚ö†Ô∏è Backend API: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
curl -s http://localhost:3000 >nul 2>&1
if not errorlevel 1 (
    echo [SUCCESS] ‚úÖ Frontend: –î–æ—Å—Ç—É–ø–µ–Ω
) else (
    echo [WARNING] ‚ö†Ô∏è Frontend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ MQTT
docker-compose exec -T mosquitto mosquitto_pub -h localhost -t test -m "test" >nul 2>&1
if not errorlevel 1 (
    echo [SUCCESS] ‚úÖ MQTT Broker: –î–æ—Å—Ç—É–ø–µ–Ω
) else (
    echo [WARNING] ‚ö†Ô∏è MQTT Broker: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
curl -s http://localhost:8080 >nul 2>&1
if not errorlevel 1 (
    echo [SUCCESS] ‚úÖ WebSocket: –î–æ—Å—Ç—É–ø–µ–Ω
) else (
    echo [WARNING] ‚ö†Ô∏è WebSocket: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
)

echo.
echo üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:
echo =========================
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

echo.
echo üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
echo ===================
echo - –ó–∞–ø—É—Å—Ç–∏—Ç—å: start.bat
echo - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: stop.bat
echo - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose restart
echo - –õ–æ–≥–∏: docker-compose logs -f
echo - –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: docker-compose logs -f [service_name]
echo - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ: stop.bat --clean
echo.
echo üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:
echo =================
echo - Frontend: http://localhost:3000
echo - Backend API: http://localhost:8000
echo - MQTT Broker: localhost:1883
echo - PostgreSQL: localhost:5432
echo - WebSocket: ws://localhost:8080
echo.
echo üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!

pause
