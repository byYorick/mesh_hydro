#!/bin/bash

# ========================================
# MESH HYDRO V2 - DOCKER STATUS SCRIPT
# ========================================

set -e

echo "üìä –°—Ç–∞—Ç—É—Å Mesh Hydro System V2..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose.yml..."

if [ ! -f "docker-compose.yml" ]; then
    error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
echo ""
echo "üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "===================="
docker-compose ps

echo ""
echo "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
echo "========================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
services=("postgres" "mosquitto" "backend" "mqtt_listener" "scheduler" "reverb" "frontend")

for service in "${services[@]}"; do
    status=$(docker-compose ps -q $service)
    if [ -n "$status" ]; then
        container_status=$(docker inspect --format='{{.State.Status}}' $status 2>/dev/null || echo "not found")
        if [ "$container_status" = "running" ]; then
            success "‚úÖ $service: –ó–∞–ø—É—â–µ–Ω"
        else
            warning "‚ö†Ô∏è $service: $container_status"
        fi
    else
        error "‚ùå $service: –ù–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if docker-compose exec -T postgres pg_isready -U hydro -d hydro_system >/dev/null 2>&1; then
    success "‚úÖ PostgreSQL: –î–æ—Å—Ç—É–ø–µ–Ω"
else
    error "‚ùå PostgreSQL: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
if curl -s http://localhost:8000/health >/dev/null 2>&1; then
    success "‚úÖ Backend API: –î–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è Backend API: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
if curl -s http://localhost:3000 >/dev/null 2>&1; then
    success "‚úÖ Frontend: –î–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è Frontend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MQTT
if docker-compose exec -T mosquitto mosquitto_pub -h localhost -t test -m "test" >/dev/null 2>&1; then
    success "‚úÖ MQTT Broker: –î–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è MQTT Broker: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
if curl -s http://localhost:8080 >/dev/null 2>&1; then
    success "‚úÖ WebSocket: –î–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è WebSocket: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
echo "========================="
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" | head -10

echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "==================="
echo "- –ó–∞–ø—É—Å—Ç–∏—Ç—å: ./start.sh"
echo "- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: ./stop.sh"
echo "- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose restart"
echo "- –õ–æ–≥–∏: docker-compose logs -f"
echo "- –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: docker-compose logs -f [service_name]"
echo "- –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ: ./stop.sh --clean"
echo ""
echo "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "================="
echo "- Frontend: http://localhost:3000"
echo "- Backend API: http://localhost:8000"
echo "- MQTT Broker: localhost:1883"
echo "- PostgreSQL: localhost:5432"
echo "- WebSocket: ws://localhost:8080"
echo ""
echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
