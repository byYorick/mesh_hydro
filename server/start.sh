#!/bin/bash

# ========================================
# MESH HYDRO V2 - DOCKER START SCRIPT
# ========================================

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Mesh Hydro System V2..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."

if [ ! -f "docker-compose.yml" ]; then
    error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

if [ ! -f ".env" ]; then
    warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª..."
    cat > .env << EOF
# Mesh Hydro System V2 Environment
APP_NAME="Mesh Hydro System"
APP_ENV=production
APP_KEY=base64:hydro_app_key_2025
APP_DEBUG=false
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=info

DB_CONNECTION=pgsql
DB_HOST=postgres
DB_PORT=5432
DB_DATABASE=hydro_system
DB_USERNAME=hydro
DB_PASSWORD=hydro_secure_pass_2025

BROADCAST_DRIVER=reverb
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="\${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=hydro-app
PUSHER_APP_KEY=hydro-app-key
PUSHER_APP_SECRET=hydro-app-secret
PUSHER_HOST=reverb
PUSHER_PORT=8080
PUSHER_SCHEME=http
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="\${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="\${PUSHER_HOST}"
VITE_PUSHER_PORT="\${PUSHER_PORT}"
VITE_PUSHER_SCHEME="\${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="\${PUSHER_APP_CLUSTER}"

# MQTT Settings
MQTT_HOST=mosquitto
MQTT_PORT=1883
MQTT_USERNAME=
MQTT_PASSWORD=
MQTT_CLIENT_ID=hydro_backend
MQTT_TOPIC_PREFIX=hydro

# Telegram Bot
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# Node Settings
NODE_OFFLINE_TIMEOUT=300
NODE_HEARTBEAT_INTERVAL=60
EOF
    success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è volumes
log "–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
mkdir -p mosquitto/{config,data,log}
mkdir -p nginx/ssl

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mosquitto
if [ ! -f "mosquitto/config/mosquitto.conf" ]; then
    log "–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Mosquitto..."
    cat > mosquitto/config/mosquitto.conf << EOF
# Mosquitto Configuration for Mesh Hydro System
listener 1883
allow_anonymous true
persistence true
persistence_location /mosquitto/data/
log_dest file /mosquitto/log/mosquitto.log
log_type error
log_type warning
log_type notice
log_type information
connection_messages true
log_timestamp true
EOF
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mosquitto —Å–æ–∑–¥–∞–Ω–∞"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down --remove-orphans || true

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."

# –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∏ Mosquitto..."
docker-compose up -d postgres mosquitto

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
log "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
timeout=60
while [ $timeout -gt 0 ]; do
    if docker-compose exec -T postgres pg_isready -U hydro -d hydro_system >/dev/null 2>&1; then
        success "PostgreSQL –≥–æ—Ç–æ–≤"
        break
    fi
    sleep 2
    timeout=$((timeout - 2))
done

if [ $timeout -le 0 ]; then
    error "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
fi

# –ó–∞–ø—É—Å–∫ backend
log "–ó–∞–ø—É—Å–∫–∞–µ–º backend..."
docker-compose up -d backend

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
log "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend..."
timeout=60
while [ $timeout -gt 0 ]; do
    if curl -s http://localhost:8000/health >/dev/null 2>&1; then
        success "Backend –≥–æ—Ç–æ–≤"
        break
    fi
    sleep 2
    timeout=$((timeout - 2))
done

if [ $timeout -le 0 ]; then
    warning "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
docker-compose up -d mqtt_listener scheduler reverb frontend

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend
log "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend..."
timeout=60
while [ $timeout -gt 0 ]; do
    if curl -s http://localhost:3000 >/dev/null 2>&1; then
        success "Frontend –≥–æ—Ç–æ–≤"
        break
    fi
    sleep 2
    timeout=$((timeout - 2))
done

if [ $timeout -le 0 ]; then
    warning "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if docker-compose exec -T postgres pg_isready -U hydro -d hydro_system >/dev/null 2>&1; then
    success "‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    error "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
if curl -s http://localhost:8000/health >/dev/null 2>&1; then
    success "‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
if curl -s http://localhost:3000 >/dev/null 2>&1; then
    success "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MQTT
if docker-compose exec -T mosquitto mosquitto_pub -h localhost -t test -m "test" >/dev/null 2>&1; then
    success "‚úÖ MQTT Broker –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "‚ö†Ô∏è MQTT Broker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

success "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"

echo ""
echo "üéâ Mesh Hydro System V2 –∑–∞–ø—É—â–µ–Ω–∞!"
echo ""
echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "- Frontend: http://localhost:3000"
echo "- Backend API: http://localhost:8000"
echo "- MQTT Broker: localhost:1883"
echo "- PostgreSQL: localhost:5432"
echo "- WebSocket: ws://localhost:8080"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "- –°—Ç–∞—Ç—É—Å: docker-compose ps"
echo "- –õ–æ–≥–∏: docker-compose logs -f"
echo "- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker-compose down"
echo "- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose restart"
echo ""
echo "üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000"
echo ""
echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
