#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { glob } from 'glob'

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ console.log
const patterns = [
  'src/**/*.vue',
  'src/**/*.js',
  'src/**/*.ts'
]

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
const excludePatterns = [
  'src/utils/logger.ts', // –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã console.log
  'src/__tests__/**/*'   // –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
]

let totalRemoved = 0
let filesProcessed = 0

function removeConsoleLogs (content, filePath) {
  const lines = content.split('\n')
  const newLines = []
  let removed = 0

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å console.log –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞—Ö
    if (line.includes('console.log') &&
        !line.trim().startsWith('//') &&
        !line.trim().startsWith('*') &&
        !line.includes('"console.log"') &&
        !line.includes("'console.log'") &&
        !line.includes('`console.log`')) {

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      const trimmed = line.trim()
      if (trimmed.startsWith('console.log(') && trimmed.endsWith(');')) {
        // –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π console.log - —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        removed++
        continue
      } else if (trimmed.startsWith('console.log(')) {
        // –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π console.log - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
        let j = i
        let bracketCount = 0
        let foundEnd = false

        while (j < lines.length && !foundEnd) {
          const currentLine = lines[j]
          for (const char of currentLine) {
            if (char === '(') bracketCount++
            if (char === ')') bracketCount--
          }
          if (bracketCount === 0 && currentLine.includes(';')) {
            foundEnd = true
            break
          }
          j++
        }

        if (foundEnd) {
          // –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ console.log
          removed++
          i = j // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ console.log
          continue
        }
      }
    }

    newLines.push(line)
  }

  if (removed > 0) {
    console.log(`  üìù ${filePath}: —É–¥–∞–ª–µ–Ω–æ ${removed} console.log`)
    totalRemoved += removed
  }

  return newLines.join('\n')
}

function processFile (filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8')
    const newContent = removeConsoleLogs(content, filePath)

    if (content !== newContent) {
      fs.writeFileSync(filePath, newContent, 'utf8')
      filesProcessed++
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message)
  }
}

async function main () {
  console.log('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É console.log...\n')

  for (const pattern of patterns) {
    const files = await glob(pattern, {
      cwd: process.cwd(),
      ignore: excludePatterns
    })

    files.forEach(file => {
      processFile(file)
    })
  }

  console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesProcessed}`)
  console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ console.log: ${totalRemoved}`)
}

main().catch(console.error)


