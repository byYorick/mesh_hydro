#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –§–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
const filesToMigrate = [
  'src/stores/app.js',
  'src/stores/nodes.js',
  'src/stores/events.js',
  'src/stores/telemetry.js',
  'src/stores/errors.js',
  'src/services/api.js',
  'src/services/echo.js',
  'src/services/nodes-api.js',
  'src/composables/useNodeStatus.js',
  'src/composables/useOfflineMode.js',
  'src/composables/useDebounce.js',
  'src/composables/useVirtualList.js',
  'src/composables/useResponsive.js',
  'src/composables/usePullToRefresh.js',
  'src/router/index.js',
  'src/plugins/vuetify.js',
  'src/utils/time.js'
]

let migratedCount = 0
let errorCount = 0

function migrateFile (filePath) {
  try {
    const fullPath = path.join(__dirname, '..', filePath)

    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
      return
    }

    const content = fs.readFileSync(fullPath, 'utf8')
    const newPath = filePath.replace('.js', '.ts')
    const newFullPath = path.join(__dirname, '..', newPath)

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    let newContent = content

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è Vue 3 Composition API
    if (filePath.includes('stores/') || filePath.includes('composables/')) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (!newContent.includes('import type')) {
        newContent = `import type { Ref, ComputedRef } from 'vue'\n${  newContent}`
      }
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è Pinia stores
    if (filePath.includes('stores/')) {
      if (!newContent.includes('import type') && !newContent.includes('import { defineStore')) {
        newContent = `import type { Ref, ComputedRef } from 'vue'\n${  newContent}`
      }
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è API
    if (filePath.includes('services/')) {
      if (!newContent.includes('import type')) {
        newContent = `import type { AxiosResponse, AxiosError } from 'axios'\n${  newContent}`
      }
    }

    // 4. –ó–∞–º–µ–Ω—è–µ–º export default –Ω–∞ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
    newContent = newContent.replace(
      /export default\s+function\s+(\w+)/g,
      'export function $1'
    )

    // 5. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    newContent = newContent.replace(
      /function\s+(\w+)\s*\(\s*([^)]*)\s*\)/g,
      (match, funcName, params) => {
        if (params.trim()) {
          return `function ${funcName}(${params}): any`
        }
        return `function ${funcName}(): any`
      }
    )

    // 6. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    newContent = newContent.replace(
      /const\s+(\w+)\s*=\s*ref\s*\(/g,
      'const $1 = ref<any>('
    )

    newContent = newContent.replace(
      /const\s+(\w+)\s*=\s*computed\s*\(/g,
      'const $1 = computed<any>('
    )

    // 7. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
    newContent = newContent.replace(
      /const\s+(\w+)\s*=\s*\{/g,
      'const $1: any = {'
    )

    // 8. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
    newContent = newContent.replace(
      /const\s+(\w+)\s*=\s*\[/g,
      'const $1: any[] = ['
    )

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(newFullPath, newContent, 'utf8')

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(fullPath)

    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${filePath} ‚Üí ${newPath}`)
    migratedCount++

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${filePath}:`, error.message)
    errorCount++
  }
}

async function main () {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é JS ‚Üí TypeScript...\n')

  for (const file of filesToMigrate) {
    migrateFile(file)
  }

  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`)
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)

  if (errorCount === 0) {
    console.log('\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ TypeScript!')
  }
}

main().catch(console.error)


