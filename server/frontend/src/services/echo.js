import Echo from 'laravel-echo'
import Pusher from 'pusher-js'

/**
 * Laravel Echo instance –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
let echoInstance = null
let fallbackInterval = null
let isWebSocketConnected = false
let fallbackMode = false
let reconnectAttempts = 0
let maxReconnectAttempts = 5
let reconnectTimeout = null

export function initializeEcho() {
  if (echoInstance) {
    return echoInstance
  }

  // Reverb (Pusher protocol) settings
  window.Pusher = Pusher
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –¥–ª—è Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const wsHost = import.meta.env.VITE_WS_HOST || (window.location.hostname === 'localhost' ? 'localhost' : 'reverb')
  const wsPort = Number(import.meta.env.VITE_WS_PORT || 8080) // Laravel Reverb runs on 8080
  const key = import.meta.env.VITE_PUSHER_KEY || 'hydro-app-key'

  // Configuration loaded

  try {
    echoInstance = new Echo({
      broadcaster: 'pusher',
      key,
      wsHost,
      wsPort,
      forceTLS: false,
      encrypted: false,
      disableStats: true,
      enabledTransports: ['ws'],
      cluster: '',
      authEndpoint: '/broadcasting/auth',
      auth: {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('auth_token') || ''}`,
        },
      },
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Reverb
      wsPath: '',
      activityTimeout: 30000,
      pongTimeout: 6000,
    })
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (echoInstance.connector) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (typeof echoInstance.connector.connect === 'function') {
        try {
          echoInstance.connector.connect()
        } catch (connectError) {
          console.error('‚ùå Manual connection failed:', connectError)
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å socket, –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (echoInstance.connector.socket && typeof echoInstance.connector.socket.connect === 'function') {
        try {
          echoInstance.connector.socket.connect()
        } catch (socketError) {
          console.error('‚ùå Socket connection failed:', socketError)
        }
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å socket –≤—Ä—É—á–Ω—É—é
      if (!echoInstance.connector.socket) {
        try {
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Reverb
          const socketUrl = `ws://${wsHost}:${wsPort}/app/${key}?protocol=7&client=js&version=8.4.0&flash=false`
          const manualSocket = new WebSocket(socketUrl)
          
          manualSocket.onopen = () => {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º socket –∫ connector
            if (echoInstance.connector) {
              echoInstance.connector.socket = manualSocket
              
              // WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ real-time —Ä–µ–∂–∏–º
              if (fallbackMode) {
                stopFallbackPolling()
                fallbackMode = false
                console.log('‚úÖ WebSocket connected')
              }
            }
          }
          
          manualSocket.onerror = (error) => {
            console.error('‚ùå Manual socket failed:', error)
          }
          
          manualSocket.onclose = (event) => {
            console.log('üîç Manual socket closed:', event.code, event.reason)
          }
        } catch (manualError) {
          console.error('‚ùå Manual socket creation failed:', manualError)
        }
      }
    } else {
      console.warn('‚ö†Ô∏è No connector found in Echo instance')
    }
  } catch (error) {
    console.error('‚ùå Echo initialization failed:', {
      message: error?.message || 'Unknown error',
      error: error,
      stack: error?.stack,
      type: typeof error
    })
    // Start fallback mode immediately
    startFallbackPolling()
    return null
  }

  // Connection event handlers - –æ–±–µ—Ä–Ω—É—Ç—ã –≤ try-catch
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ socket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (echoInstance?.connector?.socket) {
      echoInstance.connector.socket.on('connect', () => {
        console.log('‚úÖ WebSocket connected')
        isWebSocketConnected = true
        fallbackMode = false
        stopFallbackPolling()
      })

      echoInstance.connector.socket.on('disconnect', (reason) => {
        console.warn('‚ö†Ô∏è WebSocket disconnected:', reason)
        isWebSocketConnected = false
        startFallbackPolling()
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (reconnectAttempts < maxReconnectAttempts) {
          scheduleReconnect()
        }
      })

      echoInstance.connector.socket.on('reconnect', (attemptNumber) => {
        console.log(`üîÑ WebSocket reconnected (attempt ${attemptNumber})`)
        isWebSocketConnected = true
        fallbackMode = false
        stopFallbackPolling()
      })

      echoInstance.connector.socket.on('reconnect_error', (error) => {
        console.error('‚ùå WebSocket reconnect error:', error)
        isWebSocketConnected = false
        startFallbackPolling()
      })

      echoInstance.connector.socket.on('connect_error', (error) => {
        console.error('‚ùå WebSocket connection error:', error)
        isWebSocketConnected = false
        startFallbackPolling()
      })
    } else {
      console.warn('‚ö†Ô∏è Echo created but socket not available, using fallback polling')
      console.log('üîç Debug info:', {
        echoInstance: !!echoInstance,
        connector: !!echoInstance?.connector,
        socket: !!echoInstance?.connector?.socket,
        connectorType: typeof echoInstance?.connector,
        connectorKeys: echoInstance?.connector ? Object.keys(echoInstance.connector) : 'no connector'
      })
      startFallbackPolling()
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Pusher Echo initialization failed, trying Socket.IO fallback:', error)
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º Socket.IO –∫–∞–∫ fallback
    try {
      echoInstance = new Echo({
        broadcaster: 'socket.io',
        host: `${wsHost}:${wsPort}`,
        key,
        auth: {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('auth_token') || ''}`,
          },
        },
      })
      console.log('‚úÖ Socket.IO Echo fallback created successfully')
    } catch (socketIoError) {
      console.warn('‚ö†Ô∏è Socket.IO Echo also failed, using fallback polling:', socketIoError)
      startFallbackPolling()
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebSocket
  if (echoInstance?.connector?.socket) {
    echoInstance.connector.socket.on('connect', () => {
      console.log('‚úÖ WebSocket connected successfully')
      if (fallbackMode) {
        console.log('üîÑ Switching from fallback to real-time mode')
        stopFallbackPolling()
        fallbackMode = false
      }
    })
    
    echoInstance.connector.socket.on('disconnect', (reason) => {
      console.warn('‚ö†Ô∏è WebSocket disconnected:', reason)
      if (!fallbackMode) {
        console.log('üîÑ Switching to fallback mode')
        startFallbackPolling()
      }
    })
    
    echoInstance.connector.socket.on('error', (error) => {
      console.error('‚ùå WebSocket error:', error)
    })
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (echoInstance?.connector?.socket) {
      // WebSocket –∏—Å–ø–æ–ª—å–∑—É–µ—Ç readyState –≤–º–µ—Å—Ç–æ connected
      const isConnected = echoInstance.connector.socket.readyState === WebSocket.OPEN
      console.log('üîç WebSocket connection status after 2s:', {
        connected: isConnected,
        readyState: echoInstance.connector.socket.readyState,
        readyStateText: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][echoInstance.connector.socket.readyState],
        url: echoInstance.connector.socket.url
      })
      
      if (!isConnected && !fallbackMode) {
        console.warn('‚ö†Ô∏è WebSocket not connected after 2s, starting fallback')
        startFallbackPolling()
      } else if (isConnected && fallbackMode) {
        console.log('üîÑ WebSocket is connected, stopping fallback')
        stopFallbackPolling()
        fallbackMode = false
      }
    } else {
      console.warn('‚ö†Ô∏è No socket available after 2s, starting fallback')
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      try {
        const testUrl = `ws://${wsHost}:${wsPort}/app/${key}?protocol=7&client=js&version=8.4.0&flash=false`
        console.log('üîç Testing WebSocket connection to:', testUrl)
        
        const testSocket = new WebSocket(testUrl)
        testSocket.onopen = () => {
          console.log('‚úÖ Direct WebSocket connection successful')
          testSocket.close()
        }
        testSocket.onerror = (error) => {
          console.error('‚ùå Direct WebSocket connection failed:', error)
        }
        testSocket.onclose = (event) => {
          console.log('üîç WebSocket closed:', event.code, event.reason)
        }
      } catch (testError) {
        console.error('‚ùå WebSocket test failed:', testError)
      }
      
      startFallbackPolling()
    }
  }, 2000)

  return echoInstance
}

export function getEcho() {
  if (!echoInstance) {
    return initializeEcho()
  }
  return echoInstance
}

export function disconnectEcho() {
  if (echoInstance) {
    echoInstance.disconnect()
    echoInstance = null
    console.log('üëã WebSocket disconnected')
  }
  stopFallbackPolling()
  isWebSocketConnected = false
  fallbackMode = false
  
  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout)
    reconnectTimeout = null
  }
  reconnectAttempts = 0
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
function scheduleReconnect() {
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout)
  }
  
  reconnectAttempts++
  const delay = Math.min(1000 * Math.pow(2, reconnectAttempts - 1), 30000) // Exponential backoff, max 30s
  
  console.log(`üîÑ Scheduling reconnect attempt ${reconnectAttempts}/${maxReconnectAttempts} in ${delay}ms`)
  
  reconnectTimeout = setTimeout(() => {
    reconnectWebSocket()
  }, delay)
}

/**
 * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
 */
function reconnectWebSocket() {
  if (isWebSocketConnected) {
    console.log('‚úÖ WebSocket already connected, skipping reconnect')
    return
  }
  
  console.log(`üîÑ Attempting to reconnect WebSocket (attempt ${reconnectAttempts}/${maxReconnectAttempts})`)
  
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (echoInstance) {
      echoInstance.disconnect()
      echoInstance = null
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    echoInstance = initializeEcho()
    
    if (echoInstance) {
      console.log('‚úÖ WebSocket reconnected successfully')
      reconnectAttempts = 0
      isWebSocketConnected = true
      fallbackMode = false
      stopFallbackPolling()
    } else {
      console.warn('‚ö†Ô∏è WebSocket reconnect failed, continuing with fallback')
      startFallbackPolling()
    }
  } catch (error) {
    console.error('‚ùå WebSocket reconnect error:', error)
    startFallbackPolling()
  }
}

/**
 * Fallback polling –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WebSocket
 */
function startFallbackPolling() {
  if (fallbackMode || fallbackInterval) {
    return
  }
  
  console.log('üîÑ Starting fallback polling mode')
  fallbackMode = true
  
  // Polling –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API)
  fallbackInterval = setInterval(async () => {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Å–µ—Ä–≤–∏—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const { default: api } = await import('./api.js')
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥—ã API
      const [nodesResponse, eventsResponse] = await Promise.allSettled([
        api.getNodes(),
        api.getEvents({ limit: 10 })
      ])
      
      // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Echo
      if (nodesResponse.status === 'fulfilled') {
        window.dispatchEvent(new CustomEvent('echo:fallback', {
          detail: {
            channel: 'hydro.nodes',
            event: 'NodeStatusChanged',
            data: nodesResponse.value
          }
        }))
      }
      
      if (eventsResponse.status === 'fulfilled') {
        window.dispatchEvent(new CustomEvent('echo:fallback', {
          detail: {
            channel: 'hydro.events',
            event: 'EventCreated',
            data: eventsResponse.value
          }
        }))
      }
    } catch (error) {
      console.warn('Fallback polling error:', error)
    }
  }, 10000)
}

function stopFallbackPolling() {
  if (fallbackInterval) {
    clearInterval(fallbackInterval)
    fallbackInterval = null
    console.log('‚úÖ Fallback polling stopped')
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export function getConnectionStatus() {
  return {
    isWebSocketConnected,
    fallbackMode,
    hasEcho: !!echoInstance
  }
}

export default {
  initialize: initializeEcho,
  get: getEcho,
  disconnect: disconnectEcho,
  getConnectionStatus,
}

