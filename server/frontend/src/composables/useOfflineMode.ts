import { Ref, ComputedRef } from 'vue'
import { ref, onMounted, onUnmounted } from 'vue'
import { useAppStore } from '@/stores/app'

/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–æ–º
 */
export function useOfflineMode(): any {
  const appStore = useAppStore()
  const isOnline = ref<any>(navigator.onLine)
  const isOfflineMode = ref<any>(false)
  const offlineQueue = ref<any>([])
  const syncInProgress = ref<any>(false)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏
  const handleOnline = () => {
    console.log('üåê Network online')
    isOnline.value = true
    isOfflineMode.value = false
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
    appStore.showSnackbar('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success', 3000)
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    syncOfflineData()
  }

  const handleOffline = () => {
    console.log('üì¥ Network offline')
    isOnline.value = false
    isOfflineMode.value = true
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    appStore.showSnackbar('–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', 'warning', 5000)
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  const syncOfflineData = async () => {
    if (syncInProgress.value || offlineQueue.value.length === 0) {
      return
    }

    syncInProgress.value = true
    console.log(`üîÑ Syncing ${offlineQueue.value.length} offline actions...`)

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Å–æ–±—ã—Ç–∏–π –∏ —Ç.–¥.
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      offlineQueue.value = []
      appStore.showSnackbar('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'success', 2000)
    } catch (error: any) {
      console.error('‚ùå Sync failed:', error)
      appStore.showSnackbar('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error', 3000)
    } finally {
      syncInProgress.value = false
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å
  const addToOfflineQueue = (action: any) => {
    offlineQueue.value.push({
      ...(action as any),
      timestamp: Date.now(),
      id: Math.random().toString(36).substr(2, 9)
    })
    
    console.log(`üìù Added to offline queue: ${action.type}`)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω)
  const executeAction = async (action, onlineHandler, offlineHandler) => {
    if (isOnline.value) {
      try {
        return await onlineHandler()
      } catch (error: any) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
        if (!navigator.onLine || error.code === 'NETWORK_ERROR') {
          isOnline.value = false
          isOfflineMode.value = true
          addToOfflineQueue(action)
          return offlineHandler ? offlineHandler() : null
        }
        throw error
      }
    } else {
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
      addToOfflineQueue(action)
      return offlineHandler ? offlineHandler() : null
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ñ–ª–∞–π–Ω
  const canExecuteOffline = (actionType: any) => {
    if (!actionType || typeof actionType !== 'string') {
      return false
    }
    
    const offlineCapableActions: any[] = [
      'view_nodes',
      'view_events',
      'view_telemetry',
      'view_settings'
    ]
    
    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined/null –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º includes
      if (offlineCapableActions && Array.isArray(offlineCapableActions) && actionType) {
        return offlineCapableActions.includes(actionType)
      }
      return false
    } catch (error: any) {
      console.error('useOfflineMode.js: isOfflineCapable - Error in includes:', error)
      console.error('useOfflineMode.js: isOfflineCapable - actionType:', actionType, typeof actionType)
      console.error('useOfflineMode.js: isOfflineCapable - offlineCapableActions:', offlineCapableActions, typeof offlineCapableActions)
      return false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  const getOfflineData = (key: any) => {
    try {
      const data = localStorage.getItem(`offline_${key}`)
      return data ? JSON.parse(data) : null
    } catch (error: any) {
      console.error('Error getting offline data:', error)
      return null
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞
  const setOfflineData = (key: any, data: any) => {
    try {
      localStorage.setItem(`offline_${key}`, JSON.stringify(data))
    } catch (error: any) {
      console.error('Error setting offline data:', error)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  const clearOfflineData = () => {
    const keys = Object.keys(localStorage).filter(key => key.startsWith('offline_'))
    keys.forEach(key => localStorage.removeItem(key))
    offlineQueue.value = []
  }

  onMounted(() => {
    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    isOnline.value = navigator.onLine
    isOfflineMode.value = !navigator.onLine
  })

  onUnmounted(() => {
    window.removeEventListener('online', handleOnline)
    window.removeEventListener('offline', handleOffline)
  })

  return {
    isOnline,
    isOfflineMode,
    offlineQueue,
    syncInProgress,
    addToOfflineQueue,
    executeAction,
    canExecuteOffline,
    getOfflineData,
    setOfflineData,
    clearOfflineData,
    syncOfflineData
  }
}
