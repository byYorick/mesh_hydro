#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PID —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ pH
–ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import time
import json
import urllib.request
import urllib.parse
import random
import math
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://localhost:3000/api"
NODE_ID = "ph_3f0c00"  # ID pH —É–∑–ª–∞
TARGET_PH = 6.5  # –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ pH (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞)
class MockPHSensor:
    def __init__(self, initial_ph=7.0, target_ph=6.5):
        self.current_ph = initial_ph
        self.target_ph = target_ph
        self.time = 0
        self.noise_level = 0.05  # –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞
        self.drift_rate = 0.001  # –°–∫–æ—Ä–æ—Å—Ç—å –¥—Ä–µ–π—Ñ–∞
        
    def read_ph(self):
        """–ß–∏—Ç–∞–µ—Ç –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH —Å —à—É–º–æ–º –∏ –¥—Ä–µ–π—Ñ–æ–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = random.gauss(0, self.noise_level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–µ–π—Ñ (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        drift = math.sin(self.time * 0.01) * self.drift_rate
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        self.current_ph += noise + drift
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        self.current_ph = max(5.0, min(9.0, self.current_ph))
        
        self.time += 1
        return round(self.current_ph, 2)
    
    def simulate_pump_effect(self, pump_type, volume_ml):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞—Å–æ—Å–∞ –Ω–∞ pH"""
        if pump_type == "ph_up":
            # pH UP —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç pH
            self.current_ph += volume_ml * 0.1  # 1 –º–ª = 0.1 pH
        elif pump_type == "ph_down":
            # pH DOWN —É–º–µ–Ω—å—à–∞–µ—Ç pH
            self.current_ph -= volume_ml * 0.1  # 1 –º–ª = 0.1 pH
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        self.current_ph = max(5.0, min(9.0, self.current_ph))

# –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π –¥–∞—Ç—á–∏–∫
mock_sensor = MockPHSensor(initial_ph=7.2, target_ph=TARGET_PH)

def send_telemetry(ph_value, node_id=NODE_ID):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        data = {
            "node_id": node_id,
            "node_type": "ph",
            "data": {
                "ph": ph_value,
                "ph_target": TARGET_PH,
                "ph_min": 5.5,
                "ph_max": 7.5,
                "temperature": 25.0 + random.uniform(-2, 2),
                "voltage": 3.3 + random.uniform(-0.1, 0.1),
                "uptime": int(time.time()),
                "heap_free": 50000 + random.randint(-5000, 5000)
            },
            "received_at": datetime.now().isoformat()
        }
        
        json_data = json.dumps(data).encode('utf-8')
        req = urllib.request.Request(
            f"{API_BASE}/telemetry",
            data=json_data,
            headers={'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req, timeout=5)
        if response.getcode() == 200:
            print(f"OK –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: pH={ph_value}")
        else:
            print(f"ERROR –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {response.getcode()}")
            
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞: {e}")

def send_event(level, message, ph_value, node_id=NODE_ID):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        data = {
            "node_id": node_id,
            "level": level,
            "message": message,
            "data": {
                "ph": ph_value,
                "ph_target": TARGET_PH,
                "pump_id": "ph_up" if "UP" in message else "ph_down",
                "kp": 1.0,
                "ki": 0.05,
                "kd": 0.3,
                "current_value": ph_value,
                "target_value": TARGET_PH
            },
            "created_at": datetime.now().isoformat()
        }
        
        json_data = json.dumps(data).encode('utf-8')
        req = urllib.request.Request(
            f"{API_BASE}/events",
            data=json_data,
            headers={'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req, timeout=5)
        if response.getcode() == 200:
            print(f"üîî –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {level} - {message}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: {response.getcode()}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    try:
        req = urllib.request.Request(f"{API_BASE}/nodes")
        response = urllib.request.urlopen(req, timeout=5)
        if response.getcode() == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def simulate_pid_control():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    print("üéØ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ PID —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ pH")
    print(f"üìä –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH: {TARGET_PH}")
    print(f"üîß –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH: {mock_sensor.current_ph}")
    print("-" * 60)
    
    iteration = 0
    last_correction_time = 0
    correction_interval = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥)
    
    while True:
        iteration += 1
        
        # –ß–∏—Ç–∞–µ–º –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH
        current_ph = mock_sensor.read_ph()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
        send_telemetry(current_ph)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É
        error = TARGET_PH - current_ph
        abs_error = abs(error)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É PID
        if abs_error <= 0.1:
            zone = "DEAD"
            zone_color = "üü¢"
        elif abs_error <= 0.3:
            zone = "CLOSE"
            zone_color = "üü°"
        else:
            zone = "FAR"
            zone_color = "üî¥"
        
        print(f"[{iteration:03d}] pH={current_ph:.2f} | Error={error:+.2f} | Zone={zone_color} {zone}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è PID –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        current_time = time.time()
        if current_time - last_correction_time >= correction_interval:
            if zone != "DEAD" and abs_error > 0.05:
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π PID)
                if zone == "CLOSE":
                    kp, ki, kd = 0.5, 0.01, 0.1
                else:  # FAR
                    kp, ki, kd = 1.0, 0.015, 0.05
                
                # –ü—Ä–æ—Å—Ç–æ–π PID —Ä–∞—Å—á–µ—Ç
                p_term = kp * error
                output_ml = abs(p_term) * 2.0  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                output_ml = min(output_ml, 5.0)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞
                
                if output_ml > 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                    pump_type = "ph_up" if error < 0 else "ph_down"
                    
                    print(f"    üîß PID –∫–æ—Ä—Ä–µ–∫—Ü–∏—è: {pump_type} {output_ml:.2f}ml (Kp={kp}, Ki={ki}, Kd={kd})")
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Å–æ—Å–∞
                    mock_sensor.simulate_pump_effect(pump_type, output_ml)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                    if zone == "FAR":
                        send_event("warning", f"pH far from target, aggressive correction", current_ph)
                    else:
                        send_event("info", f"pH correction in progress", current_ph)
                    
                    last_correction_time = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if current_ph < 5.5 or current_ph > 7.5:
            send_event("critical", f"pH out of range: {current_ph:.2f}", current_ph)
            print(f"    üö® –ê–í–ê–†–ò–Ø: pH –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!")
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        time.sleep(2)

def main():
    print("S–∏–º—É–ª—è—Ç–æ—Ä PID —Å–∏—Å—Ç–µ–º—ã –¥–ª—è pH —É–∑–ª–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not check_api():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    try:
        simulate_pid_control()
    except KeyboardInterrupt:
        print("\nüõë –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()
