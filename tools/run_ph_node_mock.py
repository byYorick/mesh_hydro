#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ pH —É–∑–ª–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PID —Å–∏—Å—Ç–µ–º—ã
"""

import subprocess
import sys
import os
import time

def run_command(cmd, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, cwd=cwd, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
            if result.stdout:
                print(result.stdout)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {cmd}")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ pH —É–∑–ª–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    ph_node_dir = os.path.join(project_root, "node_ph")
    
    if not os.path.exists(ph_node_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {ph_node_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {ph_node_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ build.bat
    build_script = os.path.join(ph_node_dir, "build.bat")
    if not os.path.exists(build_script):
        print(f"‚ùå –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ {build_script} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    print("\nüî® –°–±–æ—Ä–∫–∞ pH —É–∑–ª–∞...")
    if not run_command("build.bat", cwd=ph_node_dir):
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
        return
    
    print("\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ ESP32-C3 –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç COM –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ flash.bat –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_pid_system.py –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å flash
    response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É —Å–µ–π—á–∞—Å? (y/n): ")
    if response.lower() == 'y':
        flash_script = os.path.join(ph_node_dir, "flash.bat")
        if os.path.exists(flash_script):
            print("\nüîå –ü—Ä–æ—à–∏–≤–∫–∞ ESP32...")
            run_command("flash.bat", cwd=ph_node_dir)
        else:
            print("‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    main()
