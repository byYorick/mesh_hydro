#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–∞–π–º–∞—É—Ç–æ–≤ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
"""

import requests
import json
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://localhost:8000"
API_BASE = f"{BACKEND_URL}/api"

def test_node_status_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ —É–∑–ª–æ–≤"""
    
    print("üîç –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–¢–ê–¢–£–°–û–í –£–ó–õ–û–í")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–∑–ª–æ–≤
    try:
        response = requests.get(f"{API_BASE}/nodes")
        if response.status_code == 200:
            nodes = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É–∑–ª–æ–≤: {len(nodes)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ —É–∑–ª–æ–≤
    print("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í:")
    print("-" * 30)
    
    online_count = 0
    offline_count = 0
    warning_count = 0
    
    for node in nodes:
        node_id = node.get('node_id', 'Unknown')
        node_type = node.get('node_type', 'Unknown')
        last_seen = node.get('last_seen_at')
        online = node.get('online', False)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if last_seen:
            last_seen_dt = datetime.fromisoformat(last_seen.replace('Z', '+00:00'))
            seconds_ago = (datetime.now(last_seen_dt.tzinfo) - last_seen_dt).total_seconds()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if seconds_ago < 20:
                status = "üü¢ ONLINE"
                status_color = "green"
                online_count += 1
            elif seconds_ago < 40:
                status = "üü† WARNING"
                status_color = "orange"
                warning_count += 1
            else:
                status = "üî¥ OFFLINE"
                status_color = "red"
                offline_count += 1
                
            time_str = f"{seconds_ago:.1f}s ago"
        else:
            status = "‚ö´ NEVER SEEN"
            status_color = "grey"
            time_str = "Never"
            offline_count += 1
        
        print(f"{status} {node_id} ({node_type}) - {time_str}")
    
    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üü¢ –û–Ω–ª–∞–π–Ω: {online_count}")
    print(f"üü† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warning_count}")
    print(f"üî¥ –û—Ñ–ª–∞–π–Ω: {offline_count}")
    print(f"üìä –í—Å–µ–≥–æ: {len(nodes)}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
    print(f"\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print(f"Backend —Ç–∞–π–º–∞—É—Ç: 20 —Å–µ–∫—É–Ω–¥")
    print(f"Frontend —Ç–∞–π–º–∞—É—Ç: 20 —Å–µ–∫—É–Ω–¥")
    print(f"ESP32 —Ç–∞–π–º–∞—É—Ç: 20 —Å–µ–∫—É–Ω–¥")
    print(f"ROOT —Ç–∞–π–º–∞—É—Ç: 20 —Å–µ–∫—É–Ω–¥")
    
    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if offline_count > 0:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –æ—Ñ–ª–∞–π–Ω —É–∑–ª—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ mesh —Å–µ—Ç–∏")
        print("   - –†–∞–±–æ—Ç—É MQTT –±—Ä–æ–∫–µ—Ä–∞")
        print("   - –õ–æ–≥–∏ —É–∑–ª–æ–≤")
    
    if warning_count > 0:
        print("‚ö†Ô∏è  –ï—Å—Ç—å —É–∑–ª—ã –≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—å—é")
    
    if online_count == len(nodes):
        print("‚úÖ –í—Å–µ —É–∑–ª—ã –æ–Ω–ª–∞–π–Ω - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    # 6. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    print(f"\nüîß –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê:")
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ API –µ—Å–ª–∏ –µ—Å—Ç—å
        print("–ö–æ–º–∞–Ω–¥–∞: php artisan nodes:check-status")
        print("–°—Ç–∞—Ç—É—Å: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def test_timeout_synchronization():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    
    print("\nüîÑ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ê–ô–ú–ê–£–¢–û–í")
    print("=" * 50)
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    expected_timeouts = {
        "backend": 20,
        "frontend": 20,
        "esp32_mesh": 20,
        "root_registry": 20,
        "connection_monitor_autonomous": 20
    }
    
    print("‚úÖ –í—Å–µ —Ç–∞–π–º–∞—É—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 20 —Å–µ–∫—É–Ω–¥")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –°–¢–ê–¢–£–°–û–í")
    print("=" * 50)
    
    test_node_status_system()
    test_timeout_synchronization()
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 50)
